/*
请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
输入必须是长度为 32 的 二进制串 。

思路：
方法一：初始化值flag=1，用flag和输入的字符串进行&操作，然后flag左移，一直计算出1的个数。时间复杂度：O(n)，空间复杂度O(1)。n为二进制数字n的位数。
方法二：n&(n-1)每次抹去最右边的1。时间复杂度 O(M) ： n&(n−1)操作仅有减法和与运算，占用O(1)；设 M 为二进制数字n中1的个数，则需循环 M 次（每轮消去一个1），占用 O(M)。空间复杂度 O(1)。

易错点：如果用n和1做&操作，然后将n右移直到n为0时退出循环，这种方法当n为负数时会陷入死循环。
*/
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        while(n){
            n = (n - 1) & n;
            count++;
        }
        return count;
    }
};
